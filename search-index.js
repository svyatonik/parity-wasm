var searchIndex = {};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["parity_wasm"] = {"doc":"WebAssembly format library","items":[[0,"elements","parity_wasm","Elements of the WebAssembly binary format.",null,null],[3,"Module","parity_wasm::elements","WebAssembly module",null,null],[3,"FunctionsSection","","Section with function signatures definition.",null,null],[3,"CodeSection","","Section with function bodies of the module.",null,null],[3,"MemorySection","","Section with table definition (currently only one entry is allowed).",null,null],[3,"DataSection","","Data entries definitions.",null,null],[3,"ImportSection","","Section of the imports definition.",null,null],[3,"ExportSection","","List of exports definition.",null,null],[3,"GlobalSection","","Globals definition section.",null,null],[3,"TypeSection","","Section with type declarations",null,null],[3,"ElementSection","","Element entries section.",null,null],[3,"TableSection","","Section with table definition (currently only one is allowed).",null,null],[3,"ImportEntry","","Import entry.",null,null],[3,"MemoryType","","Memory entry.",null,null],[3,"TableType","","Table entry",null,null],[3,"GlobalType","","Global definition struct",null,null],[3,"ExportEntry","","Export entry.",null,null],[3,"GlobalEntry","","Global entry in the module.",null,null],[3,"VarUint32","","Unsigned variable-length integer, limited to 32 bits, represented by at most 5 bytes that may contain padding 0x80 bytes.",null,null],[3,"VarUint7","","7-bit unsigned integer, encoded in LEB128 (always 1 byte length)",null,null],[3,"VarUint1","","VarUint1, 1-bit value (0/1)",null,null],[3,"VarInt7","","7-bit signed integer, encoded in LEB128 (always 1 byte length)",null,null],[3,"Uint32","","32-bit unsigned integer, encoded in little endian",null,null],[3,"VarInt32","","32-bit signed integer, encoded in LEB128 (can be 1-5 bytes length)",null,null],[3,"VarInt64","","64-bit signed integer, encoded in LEB128 (can be 1-9 bytes length)",null,null],[3,"Uint64","","64-bit unsigned integer, encoded in little endian",null,null],[3,"VarUint64","","Unsigned variable-length integer, limited to 64 bits, represented by at most 9 bytes that may contain padding 0x80 bytes.",null,null],[3,"CountedList","","List for reading sequence of elements typed `T`, given they are preceded by length (serialized as VarUint32)",null,null],[3,"CountedWriter","","Helper struct to write payload which is preceded by it's own length in bytes.",null,null],[3,"CountedListWriter","","Helper struct to write series of `T` preceded by the length of the sequence serialized as VarUint32",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[3,"FunctionType","","Function signature type.",null,null],[3,"Opcodes","","Collection of opcodes (usually inside a block section).",null,null],[3,"InitExpr","","Initialization expression.",null,null],[3,"Func","","Function signature (type reference)",null,null],[3,"FuncBody","","Function body definition.",null,null],[3,"Local","","Local definition inside the function body.",null,null],[3,"ElementSegment","","Entry in the element section.",null,null],[3,"DataSegment","","Data segment definition.",null,null],[3,"Unparsed","","Unparsed part of the module/section",null,null],[12,"0","","",1,null],[4,"Section","","Section in the WebAssembly module.",null,null],[13,"Unparsed","","Section is unparsed.",2,null],[12,"id","parity_wasm::elements::Section","id of the unparsed section",2,null],[12,"payload","","raw bytes of the unparsed section",2,null],[13,"Custom","parity_wasm::elements","Custom section (`id=0`)",2,null],[13,"Type","","Types section",2,null],[13,"Import","","Import section",2,null],[13,"Function","","Function signatures section",2,null],[13,"Table","","Table definition section",2,null],[13,"Memory","","Memory definition section",2,null],[13,"Global","","Global entries section",2,null],[13,"Export","","Export definitions",2,null],[13,"Start","","Entry reference of the module",2,null],[13,"Element","","Elements section",2,null],[13,"Code","","Function bodies section",2,null],[13,"Data","","Data definition section",2,null],[4,"External","","External to local binding.",null,null],[13,"Function","","Binds to function with index.",3,null],[13,"Table","","Describes local table definition to be imported as.",3,null],[13,"Memory","","Describes local memory definition to be imported as.",3,null],[13,"Global","","Describes local global entry to be imported as.",3,null],[4,"Internal","","Internal reference of the exported entry.",null,null],[13,"Function","","Function reference.",4,null],[13,"Table","","Table reference.",4,null],[13,"Memory","","Memory reference.",4,null],[13,"Global","","Global reference.",4,null],[4,"Type","","Type definition in types section. Currently can be only of the function type.",null,null],[13,"Function","","Function type.",5,null],[4,"ValueType","","Value type.",null,null],[13,"I32","","32-bit signed integer",6,null],[13,"I64","","64-bit signed integer",6,null],[13,"F32","","32-bit float",6,null],[13,"F64","","64-bit float",6,null],[4,"BlockType","","Block type which is basically `ValueType` + NoResult (to define blocks that have no return type)",null,null],[13,"Value","","Value-type specified block type",7,null],[13,"NoResult","","No specified block type",7,null],[4,"Opcode","","Opcode",null,null],[13,"Unreachable","","",8,null],[13,"Nop","","",8,null],[13,"Block","","",8,null],[13,"Loop","","",8,null],[13,"If","","",8,null],[13,"Else","","",8,null],[13,"End","","",8,null],[13,"Br","","",8,null],[13,"BrIf","","",8,null],[13,"BrTable","","",8,null],[13,"Return","","",8,null],[13,"Call","","",8,null],[13,"CallIndirect","","",8,null],[13,"Drop","","",8,null],[13,"Select","","",8,null],[13,"GetLocal","","",8,null],[13,"SetLocal","","",8,null],[13,"TeeLocal","","",8,null],[13,"GetGlobal","","",8,null],[13,"SetGlobal","","",8,null],[13,"I32Load","","",8,null],[13,"I64Load","","",8,null],[13,"F32Load","","",8,null],[13,"F64Load","","",8,null],[13,"I32Load8S","","",8,null],[13,"I32Load8U","","",8,null],[13,"I32Load16S","","",8,null],[13,"I32Load16U","","",8,null],[13,"I64Load8S","","",8,null],[13,"I64Load8U","","",8,null],[13,"I64Load16S","","",8,null],[13,"I64Load16U","","",8,null],[13,"I64Load32S","","",8,null],[13,"I64Load32U","","",8,null],[13,"I32Store","","",8,null],[13,"I64Store","","",8,null],[13,"F32Store","","",8,null],[13,"F64Store","","",8,null],[13,"I32Store8","","",8,null],[13,"I32Store16","","",8,null],[13,"I64Store8","","",8,null],[13,"I64Store16","","",8,null],[13,"I64Store32","","",8,null],[13,"CurrentMemory","","",8,null],[13,"GrowMemory","","",8,null],[13,"I32Const","","",8,null],[13,"I64Const","","",8,null],[13,"F32Const","","",8,null],[13,"F64Const","","",8,null],[13,"I32Eqz","","",8,null],[13,"I32Eq","","",8,null],[13,"I32Ne","","",8,null],[13,"I32LtS","","",8,null],[13,"I32LtU","","",8,null],[13,"I32GtS","","",8,null],[13,"I32GtU","","",8,null],[13,"I32LeS","","",8,null],[13,"I32LeU","","",8,null],[13,"I32GeS","","",8,null],[13,"I32GeU","","",8,null],[13,"I64Eqz","","",8,null],[13,"I64Eq","","",8,null],[13,"I64Ne","","",8,null],[13,"I64LtS","","",8,null],[13,"I64LtU","","",8,null],[13,"I64GtS","","",8,null],[13,"I64GtU","","",8,null],[13,"I64LeS","","",8,null],[13,"I64LeU","","",8,null],[13,"I64GeS","","",8,null],[13,"I64GeU","","",8,null],[13,"F32Eq","","",8,null],[13,"F32Ne","","",8,null],[13,"F32Lt","","",8,null],[13,"F32Gt","","",8,null],[13,"F32Le","","",8,null],[13,"F32Ge","","",8,null],[13,"F64Eq","","",8,null],[13,"F64Ne","","",8,null],[13,"F64Lt","","",8,null],[13,"F64Gt","","",8,null],[13,"F64Le","","",8,null],[13,"F64Ge","","",8,null],[13,"I32Clz","","",8,null],[13,"I32Ctz","","",8,null],[13,"I32Popcnt","","",8,null],[13,"I32Add","","",8,null],[13,"I32Sub","","",8,null],[13,"I32Mul","","",8,null],[13,"I32DivS","","",8,null],[13,"I32DivU","","",8,null],[13,"I32RemS","","",8,null],[13,"I32RemU","","",8,null],[13,"I32And","","",8,null],[13,"I32Or","","",8,null],[13,"I32Xor","","",8,null],[13,"I32Shl","","",8,null],[13,"I32ShlS","","",8,null],[13,"I32ShrU","","",8,null],[13,"I32Rotl","","",8,null],[13,"I32Rotr","","",8,null],[13,"I64Clz","","",8,null],[13,"I64Ctz","","",8,null],[13,"I64Popcnt","","",8,null],[13,"I64Add","","",8,null],[13,"I64Sub","","",8,null],[13,"I64Mul","","",8,null],[13,"I64DivS","","",8,null],[13,"I64DivU","","",8,null],[13,"I64RemS","","",8,null],[13,"I64RemU","","",8,null],[13,"I64And","","",8,null],[13,"I64Or","","",8,null],[13,"I64Xor","","",8,null],[13,"I64Shl","","",8,null],[13,"I64ShrS","","",8,null],[13,"I64ShrU","","",8,null],[13,"I64Rotl","","",8,null],[13,"I64Rotr","","",8,null],[13,"F32Abs","","",8,null],[13,"F32Neg","","",8,null],[13,"F32Ceil","","",8,null],[13,"F32Floor","","",8,null],[13,"F32Trunc","","",8,null],[13,"F32Nearest","","",8,null],[13,"F32Sqrt","","",8,null],[13,"F32Add","","",8,null],[13,"F32Sub","","",8,null],[13,"F32Mul","","",8,null],[13,"F32Div","","",8,null],[13,"F32Min","","",8,null],[13,"F32Max","","",8,null],[13,"F32Copysign","","",8,null],[13,"F64Abs","","",8,null],[13,"F64Neg","","",8,null],[13,"F64Ceil","","",8,null],[13,"F64Floor","","",8,null],[13,"F64Trunc","","",8,null],[13,"F64Nearest","","",8,null],[13,"F64Sqrt","","",8,null],[13,"F64Add","","",8,null],[13,"F64Sub","","",8,null],[13,"F64Mul","","",8,null],[13,"F64Div","","",8,null],[13,"F64Min","","",8,null],[13,"F64Max","","",8,null],[13,"F64Copysign","","",8,null],[13,"I32WarpI64","","",8,null],[13,"I32TruncSF32","","",8,null],[13,"I32TruncUF32","","",8,null],[13,"I32TruncSF64","","",8,null],[13,"I32TruncUF64","","",8,null],[13,"I64ExtendSI32","","",8,null],[13,"I64ExtendUI32","","",8,null],[13,"I64TruncSF32","","",8,null],[13,"I64TruncUF32","","",8,null],[13,"I64TruncSF64","","",8,null],[13,"I64TruncUF64","","",8,null],[13,"F32ConvertSI32","","",8,null],[13,"F32ConvertUI32","","",8,null],[13,"F32ConvertSI64","","",8,null],[13,"F32ConvertUI64","","",8,null],[13,"F32DemoteF64","","",8,null],[13,"F64ConvertSI32","","",8,null],[13,"F64ConvertUI32","","",8,null],[13,"F64ConvertSI64","","",8,null],[13,"F64ConvertUI64","","",8,null],[13,"F64PromoteF32","","",8,null],[13,"I32ReinterpretF32","","",8,null],[13,"I64ReinterpretF64","","",8,null],[13,"F32ReinterpretI32","","",8,null],[13,"F64ReinterpretI64","","",8,null],[4,"Error","","Deserialization/serialization error",null,null],[13,"UnexpectedEof","","Unexpected end of input",9,null],[13,"InconsistentLength","","Inconsistence between declared and actual length",9,null],[12,"expected","parity_wasm::elements::Error","Expected length of the definition",9,null],[12,"actual","","Actual length of the definition",9,null],[13,"Other","parity_wasm::elements","Other static error",9,null],[13,"HeapOther","","Other allocated error",9,null],[13,"UnknownValueType","","Invalid/unknown value type declaration",9,null],[13,"NonUtf8String","","Non-utf8 string",9,null],[13,"UnknownExternalKind","","Unknown external kind code",9,null],[13,"UnknownInternalKind","","Unknown internal kind code",9,null],[13,"UnknownOpcode","","Unknown opcode encountered",9,null],[5,"deserialize_file","","Deserialize module from file.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"deserialize_buffer","","Deserialize deserializable type from buffer.",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[5,"serialize","","Create buffer with serialized value.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"serialize_to_file","","Serialize module to the file",null,{"inputs":[{"name":"p"},{"name":"module"}],"output":{"name":"result"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"new","","New module with sections",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_sections","","Destructure the module, yielding sections",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"version","","Version of module.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"sections","","Sections list. Each known section is optional and may appear at most once.",10,null],[11,"sections_mut","","Sections list (mutable) Each known section is optional and may appear at most once.",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"code_section","","Code section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"type_section","","Types section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"import_section","","Imports section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"global_section","","Globals section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"table_section","","Table section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"data_section","","Data section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elements_section","","Element section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"memory_section","","Memory section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"functions_section","","Functions signatures section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"export_section","","Export section, if any.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",10,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"typesection"}}],[11,"types","","List of type declarations",11,null],[11,"types_mut","","List of type declarations (mutable)",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",11,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"importsection"}}],[11,"entries","","List of import entries.",12,null],[11,"entries_mut","","List of import entries (mutable).",12,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",12,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"functionssection"}}],[11,"new","","New functions section",13,{"inputs":[],"output":{"name":"functionssection"}}],[11,"entries_mut","","List of all functions in the section, mutable",13,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"entries","","List of all functions in the section",13,null],[11,"deserialize","","",13,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"tablesection"}}],[11,"entries","","Table entries.",14,null],[11,"deserialize","","",14,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"memorysection"}}],[11,"entries","","List of all memory entries in the section",15,null],[11,"deserialize","","",15,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"globalsection"}}],[11,"entries","","List of all global entries in the section",16,null],[11,"deserialize","","",16,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"exportsection"}}],[11,"entries","","List of all export entries in the section",17,null],[11,"entries_mut","","List of all export entries in the section (mutable)",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",17,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"codesection"}}],[11,"new","","New code section",18,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"bodies","","All function bodies in the section.",18,null],[11,"bodies_mut","","All function bodies in the section, mutable.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",18,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"elementsection"}}],[11,"new","","New elements section",19,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"entries","","New elements entries in the section",19,null],[11,"deserialize","","",19,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"datasection"}}],[11,"new","","New data section",20,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"entries","","List of all data entries in the section",20,null],[11,"deserialize","","",20,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",20,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"varuint32"}}],[11,"from","","",21,{"inputs":[{"name":"u32"}],"output":{"name":"varuint32"}}],[11,"from","","",21,{"inputs":[{"name":"usize"}],"output":{"name":"varuint32"}}],[11,"deserialize","","",21,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",21,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"varuint64"}}],[11,"deserialize","","",22,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",22,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",22,{"inputs":[{"name":"u64"}],"output":{"name":"varuint64"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"varuint7"}}],[11,"from","","",23,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"deserialize","","",23,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",23,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"varint7"}}],[11,"from","","",24,{"inputs":[{"name":"i8"}],"output":{"name":"varint7"}}],[11,"deserialize","","",24,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",24,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"varint32"}}],[11,"from","","",25,{"inputs":[{"name":"i32"}],"output":{"name":"varint32"}}],[11,"deserialize","","",25,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",25,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"varint64"}}],[11,"from","","",26,{"inputs":[{"name":"i64"}],"output":{"name":"varint64"}}],[11,"deserialize","","",26,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",26,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"uint32"}}],[11,"deserialize","","",27,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",27,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"uint64"}}],[11,"deserialize","","",28,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",28,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"from","","",28,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"varuint1"}}],[11,"from","","",29,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"deserialize","","",29,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"into_inner","","Destroy counted list returing inner vector.",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",30,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"new","","New counted writer on top of the given serial writer",31,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"done","","Finish counted writer routing, which writes accumulated length and actual payload.",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",31,null],[11,"flush","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"valuetype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"blocktype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"blocktype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"blocktype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"new","","New function type given the signature in-params(`params`) and return type (`return_type`)",32,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"self"}}],[11,"form","","Function form (currently only valid value is `0x60`)",32,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"params","","Parameters in the function signature.",32,null],[11,"params_mut","","Mutable parameters in the function signature.",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"return_type","","Return type in the function signature, if any.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"return_type_mut","","Mutable type in the function signature, if any.",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",32,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",32,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New global type",33,{"inputs":[{"name":"valuetype"},{"name":"bool"}],"output":{"name":"self"}}],[11,"content_type","","Type of the global entry",33,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"is_mutable","","Is global entry is declared as mutable",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deserialize","","",33,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New table definition",34,{"inputs":[{"name":"u32"},{"name":"option"}],"output":{"name":"self"}}],[11,"limits","","Table memory specification",34,{"inputs":[{"name":"self"}],"output":{"name":"resizablelimits"}}],[11,"deserialize","","",34,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",34,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New memory definition",35,{"inputs":[{"name":"u32"},{"name":"option"}],"output":{"name":"self"}}],[11,"limits","","Limits of the memory entry.",35,{"inputs":[{"name":"self"}],"output":{"name":"resizablelimits"}}],[11,"deserialize","","",35,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",35,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New import entry.",36,{"inputs":[{"name":"string"},{"name":"string"},{"name":"external"}],"output":{"name":"self"}}],[11,"module","","Module reference of the import entry.",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"module_mut","","Module reference of the import entry (mutable).",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"field","","Field reference of the import entry.",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"field_mut","","Field reference of the import entry (mutable)",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"external","","Local binidng of the import entry.",36,{"inputs":[{"name":"self"}],"output":{"name":"external"}}],[11,"external_mut","","Local binidng of the import entry (mutable)",36,{"inputs":[{"name":"self"}],"output":{"name":"external"}}],[11,"deserialize","","",36,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",36,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"deserialize","","",4,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"field","","Public name",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"field_mut","","Public name (mutable)",37,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"internal","","Internal reference of the export entry.",37,{"inputs":[{"name":"self"}],"output":{"name":"internal"}}],[11,"internal_mut","","Internal reference of the export entry (mutable).",37,{"inputs":[{"name":"self"}],"output":{"name":"internal"}}],[11,"deserialize","","",37,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",37,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"global_type","","Global type.",38,{"inputs":[{"name":"self"}],"output":{"name":"globaltype"}}],[11,"init_expr","","Initialization expression (opcodes) for global.",38,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"deserialize","","",38,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",38,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"opcodes"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"opcodes"}],"output":{"name":"bool"}}],[11,"new","","New list of opcodes from vector of opcodes.",39,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"empty","","Empty expression with only `Opcode::End` opcode.",39,{"inputs":[],"output":{"name":"self"}}],[11,"elements","","List of individual opcodes.",39,null],[11,"elements_mut","","Individual opcodes, mutable.",39,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deserialize","","",39,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"new","","New initialization expression from list of opcodes. `code` must end with the `Opcode::End` opcode!",40,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"empty","","Empty expression with only `Opcode::End` opcode",40,{"inputs":[],"output":{"name":"self"}}],[11,"code","","List of opcodes used in the expression.",40,null],[11,"deserialize","","",40,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"is_terminal","","Is this opcode determines the termination of opcode sequence `true` for `Opcode::End`",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deserialize","","",8,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"serialize","","",39,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"serialize","","",40,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New function signature",41,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"type_ref","","Function signature type reference.",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","New local with `count` and `value_type`.",42,{"inputs":[{"name":"u32"},{"name":"valuetype"}],"output":{"name":"self"}}],[11,"count","","Number of locals with the shared type.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"value_type","","Type of the locals.",42,{"inputs":[{"name":"self"}],"output":{"name":"valuetype"}}],[11,"deserialize","","",42,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",42,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New function body with given `locals` and `opcodes`",43,{"inputs":[{"name":"vec"},{"name":"opcodes"}],"output":{"name":"self"}}],[11,"empty","","List of individual opcodes",43,{"inputs":[],"output":{"name":"self"}}],[11,"locals","","Locals declared in function body.",43,null],[11,"code","","Opcode sequence of the function body. Minimal opcode sequence is just `&[Opcode::End]`",43,{"inputs":[{"name":"self"}],"output":{"name":"opcodes"}}],[11,"locals_mut","","Locals declared in function body (mutable).",43,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"code_mut","","Opcode sequence of the function body (mutable).",43,{"inputs":[{"name":"self"}],"output":{"name":"opcodes"}}],[11,"deserialize","","",43,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",43,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New element segment.",44,{"inputs":[{"name":"u32"},{"name":"initexpr"},{"name":"vec"}],"output":{"name":"self"}}],[11,"members","","Sequence of function indices.",44,null],[11,"index","","Table index (currently valid only value of `0`)",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","An i32 initializer expression that computes the offset at which to place the elements.",44,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"deserialize","","",44,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",44,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","New data segments.",45,{"inputs":[{"name":"u32"},{"name":"initexpr"},{"name":"vec"}],"output":{"name":"self"}}],[11,"index","","Linear memory index (currently the only valid value is `0`).",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","An i32 initializer expression that computes the offset at which to place the data.",45,{"inputs":[{"name":"self"}],"output":{"name":"initexpr"}}],[11,"value","","Initial value of the data segment.",45,null],[11,"deserialize","","",45,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"serialize","","",45,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[8,"Deserialize","","Deserialization from serial i/o",null,null],[16,"Error","","Serialization error produced by deserialization routine.",46,null],[10,"deserialize","","Deserialize type from serial i/o",46,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[8,"Serialize","","Serialization to serial i/o",null,null],[16,"Error","","Serialization error produced by serialization routine.",47,null],[10,"serialize","","Serialize type to serial i/o",47,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"deserialize","","",1,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[0,"builder","parity_wasm","Various builders to generate/alter wasm components",null,null],[3,"ModuleBuilder","parity_wasm::builder","Module builder",null,null],[5,"module","","Start new module builder",null,{"inputs":[],"output":{"name":"modulebuilder"}}],[5,"from_module","","Start builder to extend existing module",null,{"inputs":[{"name":"module"}],"output":{"name":"modulebuilder"}}],[5,"signatures","","New builder of signature list",null,{"inputs":[],"output":{"name":"signaturesbuilder"}}],[5,"signature","","New signature builder",null,{"inputs":[],"output":{"name":"signaturebuilder"}}],[5,"function","","New builder of function (signature & body)",null,{"inputs":[],"output":{"name":"functionbuilder"}}],[5,"import","","New builder for import entry",null,{"inputs":[],"output":{"name":"importbuilder"}}],[11,"from","parity_wasm::elements","",10,{"inputs":[{"name":"modulescaffold"}],"output":{"name":"self"}}],[11,"new","parity_wasm::builder","New empty module builder",48,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","New module builder with bound callback",48,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"with_module","","Builder from raw module",48,{"inputs":[{"name":"self"},{"name":"module"}],"output":{"name":"self"}}],[11,"with_sections","","Fill module with sections from iterator",48,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_section","","Add additional section",48,{"inputs":[{"name":"self"},{"name":"section"}],"output":{"name":"self"}}],[11,"with_signatures","","Binds to the type section, creates additional types when required",48,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"self"}}],[11,"push_function","","Push stand-alone function definition, creating sections, signature and code blocks in corresponding sections. `FunctionDefinition` can be build using `builder::function` builder",48,{"inputs":[{"name":"self"},{"name":"functiondefinition"}],"output":{"name":"codelocation"}}],[11,"push_signature","","Push one function signature, returning it's calling index. Can create corresponding type in type section.",48,{"inputs":[{"name":"self"},{"name":"signature"}],"output":{"name":"u32"}}],[11,"push_signatures","","Push signatures in the module, returning corresponding indices of pushed signatures",48,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"push_import","","Push import entry to module. Not that it does not update calling indices in function bodies.",48,{"inputs":[{"name":"self"},{"name":"importentry"}],"output":{"name":"u32"}}],[11,"function","","Add new function using dedicated builder",48,{"inputs":[{"name":"self"}],"output":{"name":"functionbuilder"}}],[11,"functions","","Define functions section",48,{"inputs":[{"name":"self"}],"output":{"name":"signaturesbuilder"}}],[11,"with_import","","With inserted import entry",48,{"inputs":[{"name":"self"},{"name":"importentry"}],"output":{"name":"self"}}],[11,"import","","Import entry builder",48,{"inputs":[{"name":"self"}],"output":{"name":"importbuilder"}}],[11,"build","","Build module (final step)",48,null]],"paths":[[3,"CountedListWriter"],[3,"Unparsed"],[4,"Section"],[4,"External"],[4,"Internal"],[4,"Type"],[4,"ValueType"],[4,"BlockType"],[4,"Opcode"],[4,"Error"],[3,"Module"],[3,"TypeSection"],[3,"ImportSection"],[3,"FunctionsSection"],[3,"TableSection"],[3,"MemorySection"],[3,"GlobalSection"],[3,"ExportSection"],[3,"CodeSection"],[3,"ElementSection"],[3,"DataSection"],[3,"VarUint32"],[3,"VarUint64"],[3,"VarUint7"],[3,"VarInt7"],[3,"VarInt32"],[3,"VarInt64"],[3,"Uint32"],[3,"Uint64"],[3,"VarUint1"],[3,"CountedList"],[3,"CountedWriter"],[3,"FunctionType"],[3,"GlobalType"],[3,"TableType"],[3,"MemoryType"],[3,"ImportEntry"],[3,"ExportEntry"],[3,"GlobalEntry"],[3,"Opcodes"],[3,"InitExpr"],[3,"Func"],[3,"Local"],[3,"FuncBody"],[3,"ElementSegment"],[3,"DataSegment"],[8,"Deserialize"],[8,"Serialize"],[3,"ModuleBuilder"]]};
initSearch(searchIndex);
